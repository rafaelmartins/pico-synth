.program mcp4822_single
.side_set 2

.wrap_target
l1:
    out pins, 1     side 0b00
    jmp x-- l1      side 0b01
public ep:
    mov x, y        side 0b00
    pull ifempty    side 0b10
.wrap


.program mcp4822_dual
.side_set 2

.wrap_target
l1:
    out pins, 1     side 0b00
    jmp x-- l1      side 0b01
    mov x, y        side 0b00
    pull ifempty    side 0b10
l2:
    out pins, 1     side 0b00
    jmp x-- l2      side 0b01
public ep:
    mov x, y        side 0b00
    pull ifempty    side 0b10
.wrap


% c-sdk {

static inline void
mcp4822_single_program_init(PIO pio, uint sm, uint offset, uint basepin, float clkdiv)
{
    pio_gpio_init(pio, basepin);
    pio_gpio_init(pio, basepin + 1);
    pio_gpio_init(pio, basepin + 2);
    pio_sm_set_consecutive_pindirs(pio, sm, basepin, 3, true);
    pio_sm_config c = mcp4822_single_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, basepin + 1);
    sm_config_set_out_pins(&c, basepin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, false, true, 16);
    pio_sm_init(pio, sm, offset + mcp4822_single_offset_ep, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 15));
    pio_sm_set_clkdiv(pio, sm, clkdiv);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void
mcp4822_dual_program_init(PIO pio, uint sm, uint offset, uint basepin, float clkdiv)
{
    pio_gpio_init(pio, basepin);
    pio_gpio_init(pio, basepin + 1);
    pio_gpio_init(pio, basepin + 2);
    pio_sm_set_consecutive_pindirs(pio, sm, basepin, 3, true);
    pio_sm_config c = mcp4822_dual_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, basepin + 1);
    sm_config_set_out_pins(&c, basepin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, false, true, 32);
    pio_sm_init(pio, sm, offset + mcp4822_dual_offset_ep, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 15));
    pio_sm_set_clkdiv(pio, sm, clkdiv);
    pio_sm_set_enabled(pio, sm, true);
}

%}
